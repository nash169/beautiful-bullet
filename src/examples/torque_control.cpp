/*
    This file is part of beautiful-bullet.

    Copyright (c) 2021, 2022 Bernardo Fichera <bernardo.fichera@gmail.com>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/

// Simulator
#include <beautiful_bullet/Simulator.hpp>

// Graphics
#ifdef GRAPHICS
#include <beautiful_bullet/graphics/MagnumGraphics.hpp>
#endif

// Spaces
#include <control_lib/spatial/SE.hpp>

// Controllers
#include <control_lib/controllers/Feedback.hpp>

using namespace beautiful_bullet;
using namespace control_lib;

struct ConfigurationParams {
    struct controller : public defaults::controller {
        PARAM_SCALAR(double, dt, 1.0);
    };
};

struct Params {
    struct controller : public defaults::controller {
        PARAM_SCALAR(double, dt, 1.0);
    };

    struct feedback : public defaults::feedback {
        // Output dimension
        PARAM_SCALAR(size_t, d, 6);
    };
};

struct OperationSpaceControl : public control::MultiBodyCtr {
    OperationSpaceControl(const spatial::SE<3>& target) : control::MultiBodyCtr(ControlMode::OPERATIONSPACE)
    {
        // set controlled frame
        _frame = "lbr_iiwa_link_7";

        // a proportional feedback controller acts as first order linear ds
        // gradually driving the end-effector position towards the equilibrium
        _ds.setStiffness(0.1 * Eigen::MatrixXd::Identity(6, 6))
           .setReference(target);

        // a derivative feedback controller receive the as target
        // the velocity generated by the first order ds
        _ctr.setDamping(1 * Eigen::MatrixXd::Identity(6, 6));
    }

    Eigen::VectorXd action(bodies::MultiBody& body) override
    {
        // current state
        spatial::SE<3> sCurr(body.framePose(_frame));
        sCurr._v = body.frameVelocity(_frame);

        // reference state
        spatial::SE<3> sRef;
        sRef._v = _ds.action(sCurr);

        return _ctr.setReference(sRef).action(sCurr);
    }

    // ds & feedback
    controllers::Feedback<Params, spatial::SE<3>> _ds;
    controllers::Feedback<Params, spatial::SE<3>> _ctr;
};

int main(int argc, char const* argv[])
{
    // Create simulator
    Simulator simulator;

// Add graphics
#ifdef GRAPHICS
    simulator.setGraphics(std::make_unique<graphics::MagnumGraphics>());
#endif

    // Add ground
    simulator.addGround();

    // Multi Bodies
    bodies::MultiBodyPtr iiwaBullet = std::make_shared<bodies::MultiBody>("models/iiwa_bullet/model.urdf"),
                         iiwa = std::make_shared<bodies::MultiBody>("models/iiwa/urdf/iiwa14.urdf");

    // Task space target
    Eigen::Vector3d xDes(0.365308, -0.0810892, 1.13717);
    Eigen::Matrix3d oDes = (Eigen::Matrix3d() << 0.591427, -0.62603, 0.508233, 0.689044, 0.719749, 0.0847368, -0.418848, 0.300079, 0.857041).finished();
    spatial::SE<3> tDes(oDes, xDes);

    Eigen::VectorXd q_ref = (Eigen::Matrix<double, 7, 1>() << 0, 0, 0, -M_PI / 4, 0, M_PI / 4, 0).finished();
    // Set controlled robot
    (*iiwaBullet)
        // .setState(q_ref)
        // .setPosition(0, -1, 0)
        .addControllers(std::make_unique<OperationSpaceControl>(tDes))
        // .addControllers(std::make_unique<ConfigurationSpaceQP>(iiwaBullet, tDes));
        .activateGravity();

    // Reference configuration
    Eigen::VectorXd state(7);
    state << 0., 0.7, 0.4, 0.6, 0.3, 0.5, 0.1;

    // Set reference robot
    (*iiwa)
        .setState(state)
        .setPosition(0, 2, 0)
        .activateGravity();

    // Add robots and run simulation
    simulator.add(iiwaBullet, iiwa);
    simulator.run();

    return 0;
}
